#!/usr/bin/env ruby

require 'bundler'

Bundler.setup

require 'camera_manager'
require 'thor'

module CameraManager
  class CLI < Thor
    desc "mount", "Mounts the camera at the configured mountpoint"
    def mount
      bin.gphotofs_mount config.mount_path

      puts "Mounted camera at #{config.mount_path}"
    end

    desc "sync TYPE", "Syncs photos depending on TYPE"
    long_desc <<-LONGDESC
       `cm sync [local]` will sync from camera to local photo storage.  This is
        also the behavior if no TYPE is defined

       `cm sync acd` will sync from local photo storage to Amazon Cloud Drive
    LONGDESC
    def sync(type="local")
      case type
      when "local"
        do_local_sync
      when "acd"
        do_acd_sync
      else
        $stderr.puts "TYPE must be one of local or acd (or blank)"

        exit 1        
      end
    end

    protected

    def do_local_sync
      unless bin.gphotofs_mounted?(mount_path)
        puts "Mounting camera..."
        bin.gphotofs_mount mount_path
      end

      bin.rsync config.camera_images_path, config.photos_path      
    end

    def do_acd_sync
      remote_files = CameraManager::ACD::File.ls_hash

      Dir[self.photos_glob].each do |local_path|
        local_file = File.basename local_path

        if ! remote_files.key? local_file
          puts "missing #{local_file}, uploading..."
          # make sure we use the full path here
          acd_cli "upload #{local_path} /"
        end
      end      
    end

    def acd_cli(*args)
      bin.acd_cli args.join(' ')
    end

    def bin
      @bin ||= CameraManager::BinWrapper.new
    end

    def mount_path
      File.expand_path(config.mount_path)
    end

    def photos_glob
      File.expand_path(File.join(config.photos_path, '/*.CR2'))
    end
    
    def config
      CameraManager::Config.instance
    end
  end
end

CameraManager::CLI.start(ARGV)

